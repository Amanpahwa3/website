initSidebarItems({"struct":[["BlockModuleCache","A cache for all modules stored on chain. `vm_cache` holds the local cached modules whereas `storage` should implement trait ModuleFetcher that can fetch the modules that aren't in the cache yet. In production, it will usually provide a connection to the StateStore client to fetch the needed data. `alloc` is the lifetime for the entire VM and `blk` is the lifetime for the current block we are executing."],["TransactionModuleCache","A temporary cache for module published by a single transaction. This cache allows the transaction script to refer to either those newly published modules in `local_cache` or those existing on chain modules in `block_cache`. VM can choose to discard those newly published modules if there is an error during execution."],["VMModuleCache","Cache for modules that resides in a VM. It is an internally mutable map from module identifier to a reference to loaded module, where the actual module is owned by the Arena allocator so that it will guarantee to outlive the lifetime of the transaction."]],"trait":[["ModuleCache","Trait that describe a cache for modules. The idea is that this trait will in charge of loading resolving all dependencies of needed module from the storage."]]});