initSidebarItems({"enum":[["BinOp","Enum for binary operators"],["Builtin","Builtin \"function\"-like operators that often have a signature not expressable in the type system and/or have access to some runtime/storage context"],["Cmd","Enum for Move commands"],["CopyableVal","Bottom of the value hierarchy. These values can be trivially copyable and stored in statedb as a single entry."],["Exp","Enum for all expressions"],["FunctionBody","The body of a Move function"],["FunctionCall","Enum for different function calls"],["FunctionVisibility","Public or internal modifier for a procedure"],["Kind","The kind of a type. Analogous to `vm::file_format::Kind`."],["LValue","Enum for Move lvalues"],["ModuleIdent","Either a qualified module name like `addr.m` or `Transaction.m`, which refers to a module in the same transaction."],["ScriptOrModule","A script or a module, used to represent the two types of transactions."],["Statement",""],["StructDefinitionFields","The fields of a Move struct definition"],["Type","The type of a single value"],["UnaryOp","Enum for unary operators"]],"fn":[["parse_field","Parses a field."]],"struct":[["Block","`{ s }`"],["Function","A Move function/procedure"],["FunctionName","Newtype for the name of a function"],["FunctionSignature","The signature of a function"],["IfElse","Struct defining an if statement"],["ImportDefinition","A dependency/import declaration"],["Loop","Struct defining a loop statement"],["ModuleDefinition","A Move module"],["ModuleName","Newtype for a name of a module"],["Program","A set of move modules and a Move transaction script"],["QualifiedModuleIdent","Newtype of the address + the module name `addr.m`"],["QualifiedStructIdent","Identifier for a struct definition. Tells us where to look in the storage layer to find the code associated with the interface"],["Script","The move transaction script to be executed"],["Spanned","Generic wrapper that keeps file locations for any ast-node"],["StructDefinition","A Move struct"],["StructName","Newtype for the name of a struct"],["TypeVar","New type that represents a type variable. Used to declare type formals & reference them."],["Var","Newtype for a variable/local"],["While","Struct defining a while statement"]],"type":[["Block_","The type of a Block coupled with source location information."],["Cmd_","The type of a command with its location"],["CopyableVal_","The type of a value and its location"],["ExpFields","The type for fields and their bound expressions"],["Exp_","The type for a `Exp` and its location"],["Field","The field newtype"],["Field_","A field coupled with source location information"],["Fields","A field map"],["FunctionCall_","The type for a function call and its location"],["Function_","The type of a Function coupled with its source location information."],["LValue_",""],["Loc","The file location type"],["StructDefinition_","The type of a StructDefinition along with its source location information"],["TypeVar_","The type of a type variable with a location."],["Var_","The type of a variable with a location"]]});