initSidebarItems({"constant":[["ADMISSION_CONTROL_RPC_PROTOCOL","Protocol id for admission control RPC calls"],["CONSENSUS_DIRECT_SEND_PROTOCOL","Protocol id for consensus direct-send calls"],["CONSENSUS_RPC_PROTOCOL","Protocol id for consensus RPC calls"],["MEMPOOL_DIRECT_SEND_PROTOCOL","Protocol id for mempool direct-send calls"],["STATE_SYNCHRONIZER_DIRECT_SEND_PROTOCOL","Protocol id for state-synchronizer direct-send calls"]],"enum":[["Event","Events received by network clients in a validator"]],"mod":[["network_builder","Permission-less vs Permissioned network end-points: --------------------------------------------------- A network end-point is permissioned if it only wants to accept connections from a known set of peers (`trusted_peers`) identified by their network identity keys. This does not mean that the other end-point of a connection also needs to run in permissioned mode -- a network end-point running in permissioned mode will connect to or accept connections from an end-point running in permissionless mode as long as the latter is in its trusted peers set."]],"struct":[["AdmissionControlNetworkSender","The interface from Admission Control to Network layer."],["ConsensusNetworkSender","The interface from Consensus to Networking layer."],["MempoolNetworkSender","The interface from Mempool to Networking layer."],["NetworkEvents","A `Stream` of `Event<TMessage>` from the lower network layer to an upper network application that deserializes inbound network direct-send and rpc messages into `TMessage`, which is some protobuf format implementing the `prost::Message` trait."],["NetworkSender","`NetworkSender` is the generic interface from upper network applications to the lower network layer. It provides the full API for network applications, including sending direct-send messages, sending rpc requests, as well as dialing or disconnecting from peers and updating the list of accepted public keys."],["StateSynchronizerSender","The interface from StateSynchronizer to Networking layer."]],"type":[["AdmissionControlNetworkEvents","The interface from Network to Admission Control layer."],["ConsensusNetworkEvents","The interface from Network to Consensus layer."],["HealthCheckerNetworkEvents","The interface from Network to HealthChecker layer."],["MempoolNetworkEvents","The interface from Network to Mempool layer."],["StateSynchronizerEvents","The interface from Network to StateSynchronizer layer."]]});