initSidebarItems({"enum":[["ConsensusMsg_oneof",""],["HealthCheckerMsg_oneof",""],["IdentityMsg_Role",""],["StateSynchronizerMsg_oneof",""]],"struct":[["Block",""],["ConsensusMsg",""],["DiscoveryMsg","Discovery message exchanged as part of the discovery protocol. The discovery message sent by a peer consists of notes for all the peers the sending peer knows about."],["FullNodePayload","Discovery information relevant to public full nodes and clients."],["GetChunkRequest",""],["GetChunkResponse",""],["HealthCheckerMsg",""],["IdentityMsg","Identity message exchanged as part of the Identity protocol."],["MempoolSyncMsg","MempoolSyncMsg represents the messages exchanging between validators to keep transactions in sync. The proto definition provides the spec on the wire so that others can implement their mempool service in various languages. Mempool service is responsible for sending and receiving MempoolSyncMsg across validators. "],["Note","A `Note` contains a validator's signed `PeerInfo` as well as a signed `FullNodePayload`, which provides relevant discovery info for public full nodes and clients."],["PeerInfo","A `PeerInfo` represents the network address(es) of a Peer."],["Ping","Ping message sent as liveness probe."],["Ping2",""],["Pong","Pong message sent as response to liveness probe."],["Pong2",""],["Proposal",""],["RequestBlock",""],["RequestEpoch",""],["RespondBlock",""],["SignedFullNodePayload","A signed `FullNodePayload`."],["SignedPeerInfo","A `PeerInfo` authenticated by the peer's root `network_signing_key` stored on-chain."],["StateSynchronizerMsg",""],["SyncInfo",""],["VoteMsg",""],["VoteProposal",""]]});